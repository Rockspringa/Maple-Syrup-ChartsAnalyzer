
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.mooncoder.mapleanalyzer.logic.syntax;

import java.util.List;
import java.util.ArrayList;
import java.util.InputMismatchException;
import edu.mooncoder.mapleanalyzer.logic.lexic.Lexer;
import edu.mooncoder.mapleanalyzer.model.structures.TuplaBivalor;
import edu.mooncoder.mapleanalyzer.model.graficos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\004\000\002\003" +
    "\010\000\002\003\010\000\002\003\002\000\002\004\010" +
    "\000\002\004\002\000\002\006\007\000\002\006\007\000" +
    "\002\006\007\000\002\006\007\000\002\006\002\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\005" +
    "\007\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\002\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\013\007\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\004\000\002\014\005\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\010\002\ufffd\021\006\022\ufffd\001\002\000" +
    "\006\002\ufffb\022\ufffb\001\002\000\004\002\142\001\002" +
    "\000\006\006\007\016\010\001\002\000\004\032\116\001" +
    "\002\000\004\032\011\001\002\000\022\004\uffed\005\uffed" +
    "\007\uffed\010\uffed\011\uffed\014\uffed\015\uffed\033\uffed\001" +
    "\002\000\022\004\021\005\017\007\014\010\020\011\013" +
    "\014\015\015\022\033\016\001\002\000\004\024\113\001" +
    "\002\000\004\024\110\001\002\000\004\024\105\001\002" +
    "\000\010\002\ufffd\021\006\022\ufffd\001\002\000\004\024" +
    "\101\001\002\000\004\024\076\001\002\000\004\024\030" +
    "\001\002\000\004\024\023\001\002\000\006\017\025\020" +
    "\024\001\002\000\004\023\027\001\002\000\004\023\026" +
    "\001\002\000\022\004\ufff3\005\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\014\ufff3\015\ufff3\033\ufff3\001\002\000\022\004\ufff2" +
    "\005\ufff2\007\ufff2\010\ufff2\011\ufff2\014\ufff2\015\ufff2\033" +
    "\ufff2\001\002\000\004\030\031\001\002\000\014\026\043" +
    "\032\037\034\034\041\040\042\036\001\002\000\004\023" +
    "\033\001\002\000\022\004\ufff4\005\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\014\ufff4\015\ufff4\033\ufff4\001\002\000\010\026" +
    "\043\034\034\041\040\001\002\000\006\025\072\031\073" +
    "\001\002\000\006\025\uffe5\031\uffe5\001\002\000\010\026" +
    "\043\034\034\041\040\001\002\000\024\023\uffdc\025\uffdc" +
    "\027\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\001\002\000\006\025\064\031\063\001\002\000\006" +
    "\025\061\031\060\001\002\000\010\026\043\034\034\041" +
    "\040\001\002\000\016\025\uffe7\031\uffe7\034\047\035\046" +
    "\036\051\037\050\001\002\000\006\025\uffe3\031\uffe3\001" +
    "\002\000\010\026\043\034\034\041\040\001\002\000\010" +
    "\026\043\034\034\041\040\001\002\000\010\026\043\034" +
    "\034\041\040\001\002\000\010\026\043\034\034\041\040" +
    "\001\002\000\024\023\uffe0\025\uffe0\027\uffe0\031\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\001\002\000\024" +
    "\023\uffdf\025\uffdf\027\uffdf\031\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\001\002\000\024\023\uffe1\025\uffe1" +
    "\027\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\036\051\037" +
    "\050\001\002\000\024\023\uffe2\025\uffe2\027\uffe2\031\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\051\037\050\001\002\000" +
    "\014\027\057\034\047\035\046\036\051\037\050\001\002" +
    "\000\024\023\uffdd\025\uffdd\027\uffdd\031\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\001\002\000\004\023\uffea" +
    "\001\002\000\004\042\062\001\002\000\006\025\uffe6\031" +
    "\uffe6\001\002\000\004\023\uffeb\001\002\000\004\032\037" +
    "\001\002\000\006\025\uffe4\031\uffe4\001\002\000\014\025" +
    "\067\034\047\035\046\036\051\037\050\001\002\000\010" +
    "\026\043\034\034\041\040\001\002\000\014\033\071\034" +
    "\047\035\046\036\051\037\050\001\002\000\006\025\uffe9" +
    "\031\uffe9\001\002\000\010\026\043\034\034\041\040\001" +
    "\002\000\004\023\uffec\001\002\000\016\025\uffe8\031\uffe8" +
    "\034\047\035\046\036\051\037\050\001\002\000\024\023" +
    "\uffde\025\uffde\027\uffde\031\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\001\002\000\010\026\043\034\034\041" +
    "\040\001\002\000\014\023\100\034\047\035\046\036\051" +
    "\037\050\001\002\000\022\004\uffef\005\uffef\007\uffef\010" +
    "\uffef\011\uffef\014\uffef\015\uffef\033\uffef\001\002\000\004" +
    "\030\031\001\002\000\004\023\103\001\002\000\022\004" +
    "\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0\014\ufff0\015\ufff0" +
    "\033\ufff0\001\002\000\006\002\ufffe\022\ufffe\001\002\000" +
    "\004\030\031\001\002\000\004\023\107\001\002\000\022" +
    "\004\uffee\005\uffee\007\uffee\010\uffee\011\uffee\014\uffee\015" +
    "\uffee\033\uffee\001\002\000\004\042\111\001\002\000\004" +
    "\023\112\001\002\000\022\004\ufff5\005\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\014\ufff5\015\ufff5\033\ufff5\001\002\000\004" +
    "\042\114\001\002\000\004\023\115\001\002\000\022\004" +
    "\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1\014\ufff1\015\ufff1" +
    "\033\ufff1\001\002\000\014\007\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\033\ufff6\001\002\000\014\007\120\012\124\013\123" +
    "\014\121\033\122\001\002\000\004\024\137\001\002\000" +
    "\004\024\134\001\002\000\010\002\ufffd\021\006\022\ufffd" +
    "\001\002\000\004\024\130\001\002\000\004\024\125\001" +
    "\002\000\004\030\031\001\002\000\004\023\127\001\002" +
    "\000\014\007\ufff9\012\ufff9\013\ufff9\014\ufff9\033\ufff9\001" +
    "\002\000\004\030\031\001\002\000\004\023\132\001\002" +
    "\000\014\007\ufff8\012\ufff8\013\ufff8\014\ufff8\033\ufff8\001" +
    "\002\000\006\002\uffff\022\uffff\001\002\000\004\030\031" +
    "\001\002\000\004\023\136\001\002\000\014\007\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\033\ufff7\001\002\000\004\042\140" +
    "\001\002\000\004\023\141\001\002\000\014\007\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\033\ufffa\001\002\000\004\002\001" +
    "\001\002\000\006\002\000\022\144\001\002\000\004\026" +
    "\145\001\002\000\004\042\146\001\002\000\004\027\147" +
    "\001\002\000\004\023\150\001\002\000\006\002\ufffc\022" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\006\002\004\003\003\001\001\000\004\004" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\031\001\001\000\014" +
    "\010\034\011\041\012\040\013\044\014\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\054\001\001\000\004\014\053\001\001" +
    "\000\004\014\052\001\001\000\004\014\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private List<Object> numbers;
  private List<Object> strings;
  private List<Object> tuplas;

  public Parser(Lexer lexer) {
    super(lexer);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= syntax EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // syntax ::= declaraciones ejecuciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syntax",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= DEF BARRAS IZQ_LLAVE atributes_barras DER_LLAVE declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= DEF PIE IZQ_LLAVE atributes_pie DER_LLAVE declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ejecuciones ::= ejecuciones EJECUTAR IZQ_PARENTESIS LITERAL DER_PARENTESIS SEPARADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecuciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ejecuciones ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecuciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atributes_barras ::= atributes_barras TITULO ASIGNAR LITERAL SEPARADOR 
            {
              GraficoBarras RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoBarras grafico = (GraficoBarras)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 grafico.setTitulo(titulo); RESULT = grafico; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_barras",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atributes_barras ::= atributes_barras EJE_X ASIGNAR array SEPARADOR 
            {
              GraficoBarras RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoBarras grafico = (GraficoBarras)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int strsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Object> strs = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                      if (strs.get(0) instanceof String) {
                        grafico.setEjeX(strs);
                        RESULT = grafico;
                      } else {
                        throw new InputMismatchException();
                      }
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_barras",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atributes_barras ::= atributes_barras EJE_Y ASIGNAR array SEPARADOR 
            {
              GraficoBarras RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoBarras grafico = (GraficoBarras)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int numsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Object> nums = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                      if (nums.get(0) instanceof Double) {
                        grafico.setEjeY(nums);
                        RESULT = grafico;
                      } else {
                        throw new InputMismatchException();
                      }
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_barras",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atributes_barras ::= atributes_barras UNIR ASIGNAR array SEPARADOR 
            {
              GraficoBarras RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoBarras grafico = (GraficoBarras)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tuplsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tuplsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Object> tupls = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                      if (tupls.get(0) instanceof TuplaBivalor) {
                        grafico.setUnir(tupls);
                        RESULT = grafico;
                      } else {
                        throw new InputMismatchException();
                      }
                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_barras",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributes_barras ::= 
            {
              GraficoBarras RESULT =null;
		 RESULT = new GraficoBarras(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_barras",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atributes_pie ::= atributes_pie TITULO ASIGNAR LITERAL SEPARADOR 
            {
              GraficoPie RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoPie grafico = (GraficoPie)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_pie",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atributes_pie ::= atributes_pie ETIQUETAS ASIGNAR array SEPARADOR 
            {
              GraficoPie RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoPie grafico = (GraficoPie)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_pie",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atributes_pie ::= atributes_pie TIPO ASIGNAR PORCENTAJE SEPARADOR 
            {
              GraficoPie RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoPie grafico = (GraficoPie)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_pie",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atributes_pie ::= atributes_pie TIPO ASIGNAR CANTIDAD SEPARADOR 
            {
              GraficoPie RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoPie grafico = (GraficoPie)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_pie",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atributes_pie ::= atributes_pie EXTRA ASIGNAR LITERAL SEPARADOR 
            {
              GraficoPie RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoPie grafico = (GraficoPie)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_pie",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atributes_pie ::= atributes_pie VALORES ASIGNAR array SEPARADOR 
            {
              GraficoPie RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoPie grafico = (GraficoPie)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_pie",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atributes_pie ::= atributes_pie TOTAL ASIGNAR expr SEPARADOR 
            {
              GraficoPie RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoPie grafico = (GraficoPie)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_pie",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atributes_pie ::= atributes_pie UNIR ASIGNAR array SEPARADOR 
            {
              GraficoPie RESULT =null;
		int graficoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int graficoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GraficoPie grafico = (GraficoPie)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_pie",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atributes_pie ::= 
            {
              GraficoPie RESULT =null;
		 RESULT = new GraficoPie(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributes_pie",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // array ::= IZQ_CORCHETE grupo_exprs DER_CORCHETE 
            {
              List<Object> RESULT =null;
		 RESULT = numbers; numbers = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // array ::= IZQ_CORCHETE grupo_tuplas DER_CORCHETE 
            {
              List<Object> RESULT =null;
		 RESULT = tuplas; tuplas = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // array ::= IZQ_CORCHETE grupo_strings DER_CORCHETE 
            {
              List<Object> RESULT =null;
		 RESULT = strings; strings = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tupla ::= IZQ_LLAVE expr COMA expr DER_LLAVE 
            {
              TuplaBivalor RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double key = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TuplaBivalor(key, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tupla",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // grupo_exprs ::= grupo_exprs COMA expr 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 numbers.add(num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grupo_exprs",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // grupo_exprs ::= expr 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 numbers = new ArrayList<>(); numbers.add(num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grupo_exprs",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // grupo_strings ::= grupo_strings COMA LITERAL 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 strings.add(str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grupo_strings",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // grupo_strings ::= LITERAL 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 strings = new ArrayList<>(); strings.add(str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grupo_strings",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // grupo_tuplas ::= grupo_tuplas COMA tupla 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TuplaBivalor tupla = (TuplaBivalor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tuplas.add(tupla); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grupo_tuplas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // grupo_tuplas ::= tupla 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TuplaBivalor tupla = (TuplaBivalor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tuplas = new ArrayList<>(); tuplas.add(tupla); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grupo_tuplas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr MAS expr 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = num1 + num2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr MENOS expr 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = num1 - num2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr POR expr 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = num1 * num2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DIV expr 
            {
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = num1 / num2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= MENOS expr 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = - num; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= IZQ_PARENTESIS expr DER_PARENTESIS 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = num; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NUMBER 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = num; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
