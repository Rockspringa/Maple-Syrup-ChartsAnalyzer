package edu.mooncoder.mapleanalyzer.logic.syntax;

import java.util.List;
import java.util.ArrayList;

import edu.mooncoder.mapleanalyzer.model.graficos.GraficoBarras;
import edu.mooncoder.mapleanalyzer.model.graficos.GraficoPie;
import edu.mooncoder.mapleanalyzer.model.contracts.Grafico;
import edu.mooncoder.mapleanalyzer.logic.lexic.Lexer;
import edu.mooncoder.mapleanalyzer.model.contracts.Tipo;
import edu.mooncoder.mapleanalyzer.model.structures.TuplaBivalor;
import edu.mooncoder.mapleanalyzer.model.wrappers.ErrorHolder;
import edu.mooncoder.mapleanalyzer.model.wrappers.OcurrenciaMatematica;
import edu.mooncoder.mapleanalyzer.model.wrappers.Reporte;

parser code {:
  private List<Object> numbers;
  private List<Object> strings;
  private List<Object> tuplas;

  public Parser(Lexer lexer) {
    super(lexer);
  }

  private boolean isRight() {
    return Reporte.getReporte().getErrores().isEmpty();
  }

  @Override
  public void report_error(String message, Object info) {
    super.report_error(message, info);
  }
:}

terminal ETIQUETAS, VALORES, BARRAS, TITULO, TOTAL, EXTRA, EJE_X, EJE_Y, UNIR, TIPO, PIE;
terminal PORCENTAJE, CANTIDAD;
terminal DEF, EJECUTAR;

terminal SEPARADOR, ASIGNAR, COMA;
terminal IZQ_PARENTESIS, DER_PARENTESIS, IZQ_CORCHETE, DER_CORCHETE, IZQ_LLAVE, DER_LLAVE;
terminal MENOS, MAS, POR, DIV, NEGADO;

terminal Double NUMBER;
terminal String LITERAL;

non terminal syntax;
non terminal declaraciones, ejecuciones;

non terminal GraficoPie atributes_pie;
non terminal GraficoBarras atributes_barras;

non terminal List<Object> array;
non terminal grupo_exprs, grupo_strings, grupo_tuplas;

non terminal TuplaBivalor tupla;
non terminal Double expr;

precedence left MAS, MENOS;
precedence left POR, DIV;
precedence left NEGADO;

start with syntax;

syntax ::= declaraciones ejecuciones
           ;

declaraciones ::= DEF BARRAS IZQ_LLAVE atributes_barras:grafico DER_LLAVE declaraciones
                  {: if (isRight()) grafico.addGrafico(); :}
                  |
                  DEF PIE IZQ_LLAVE atributes_pie:grafico DER_LLAVE declaraciones
                  {: if (isRight()) grafico.addGrafico(); :}
                  |
                  ;

ejecuciones ::= ejecuciones EJECUTAR IZQ_PARENTESIS LITERAL:titulo DER_PARENTESIS SEPARADOR
                {:
                if (isRight()) {
                  try { Grafico.ejecutar(titulo); }
                  catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, tituloleft, tituloright); }
                }
                :}
                |
                ejecuciones EJECUTAR error:error
                {:
                  ErrorHolder.messageThrowed(
                    "Solo se esperan instrucciones de la forma 'Ejecucion(\"<< titulo >>\");'", 1, errorleft, errorright
                  );
                :}
                |
                ejecuciones SEPARADOR
                |
                ;

atributes_barras ::= atributes_barras:grafico TITULO:attr ASIGNAR LITERAL:titulo SEPARADOR
                     {:
                     if (isRight()) {
                       try { grafico.setTitulo(titulo); RESULT = grafico; }
                       catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                     }
                     :}
                     |
                     atributes_barras:grafico EJE_X:attr ASIGNAR array:strs SEPARADOR
                     {:
                     if (isRight()) {
                       try { grafico.setEjeX(strs); RESULT = grafico; }
                       catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                     }
                     :}
                     |
                     atributes_barras:grafico EJE_Y:attr ASIGNAR array:nums SEPARADOR
                     {:
                     if (isRight()) {
                       try { grafico.setEjeY(nums); RESULT = grafico; }
                       catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                     }
                     :}
                     |
                     atributes_barras:grafico UNIR:attr ASIGNAR array:tupls SEPARADOR
                     {:
                     if (isRight()) {
                       try { grafico.setUnir(tupls); RESULT = grafico; }
                       catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                     }
                     :}
                     |
                     atributes_barras:grafico SEPARADOR
                     {: RESULT = grafico; :}
                     | /* errores */
                     atributes_barras TITULO error:error
                     {: ErrorHolder.messageEsperabaUna("asignacion de un literal", 1, errorleft, errorright); :}
                     |
                     atributes_barras EJE_X error:error
                     {: ErrorHolder.messageEsperabaUna("asignacion de un lista de literales", 1, errorleft, errorright); :}
                     |
                     atributes_barras EJE_Y error:error
                     {: ErrorHolder.messageEsperabaUna("asignacion de un lista de valores numericos", 1, errorleft, errorright); :}
                     |
                     atributes_barras UNIR error:error
                     {: ErrorHolder.messageEsperabaUna("asignacion de un lista de tuplas", 1, errorleft, errorright); :}
                     |
                     atributes_barras error:error
                     {: ErrorHolder.messageEsperabaUn("atributo para el grafico de barras", 1, errorleft, errorright); :}
                     |
                     /* lambda */
                     {: if (isRight()) RESULT = new GraficoBarras(); :}
                     ;

atributes_pie ::= atributes_pie:grafico TITULO:attr ASIGNAR LITERAL:titulo SEPARADOR
                  {:
                  if (isRight()) {
                    try { grafico.setTitulo(titulo); RESULT = grafico; }
                    catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                  }
                  :}
                  |
                  atributes_pie:grafico ETIQUETAS:attr ASIGNAR array:strs SEPARADOR
                  {:
                  if (isRight()) {
                    try { grafico.setEtiquetas(strs); RESULT = grafico; }
                    catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                  }
                  :}
                  |
                  atributes_pie:grafico TIPO:attr ASIGNAR PORCENTAJE SEPARADOR
                  {:
                  if (isRight()) {
                    try { grafico.setTipo(Tipo.PORCENTAJE); RESULT = grafico; }
                    catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                  }
                  :}
                  |
                  atributes_pie:grafico TIPO:attr ASIGNAR CANTIDAD SEPARADOR
                  {:
                  if (isRight()) {
                    try { grafico.setTipo(Tipo.CANTIDAD); RESULT = grafico; }
                    catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                  }
                  :}
                  |
                  atributes_pie:grafico EXTRA:attr ASIGNAR LITERAL:extra SEPARADOR
                  {:
                  if (isRight()) {
                    try { grafico.setExtra(extra); RESULT = grafico; }
                    catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                  }
                  :}
                  |
                  atributes_pie:grafico VALORES:attr ASIGNAR array:nums SEPARADOR
                  {:
                  if (isRight()) {
                    try { grafico.setValores(nums); RESULT = grafico; }
                    catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                  }
                  :}
                  |
                  atributes_pie:grafico TOTAL:attr ASIGNAR expr:total SEPARADOR
                  {:
                  if (isRight()) {
                    try { grafico.setTotal(total); RESULT = grafico; }
                    catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                  }
                  :}
                  |
                  atributes_pie:grafico UNIR:attr ASIGNAR array:tupls SEPARADOR
                  {:
                  if (isRight()) {
                    try { grafico.setUnir(tupls); RESULT = grafico; }
                    catch (Exception e) { ErrorHolder.messageThrowed(e.getMessage(), 2, attrleft, attrright); }
                  }
                  :}
                  |
                  atributes_pie:grafico SEPARADOR
                  {: RESULT = grafico; :}
                  | /* errores */
                  atributes_pie TITULO error:error
                  {: ErrorHolder.messageEsperabaUna("asignacion de un literal", 1, errorleft, errorright); :}
                  |
                  atributes_pie ETIQUETAS error:error
                  {: ErrorHolder.messageEsperabaUna("asignacion de una lista de literales", 1, errorleft, errorright); :}
                  |
                  atributes_pie TIPO error:error
                  {: ErrorHolder.messageEsperabaUna("asignacion de un tipo", 1, errorleft, errorright); :}
                  |
                  atributes_pie EXTRA error:error
                  {: ErrorHolder.messageEsperabaUna("asignacion de un literal", 1, errorleft, errorright); :}
                  |
                  atributes_pie VALORES error:error
                  {: ErrorHolder.messageEsperabaUna("asignacion de una lista de valores numericos", 1, errorleft, errorright); :}
                  |
                  atributes_pie TOTAL error:error
                  {: ErrorHolder.messageEsperabaUna("asignacion de un valor numerico", 1, errorleft, errorright); :}
                  |
                  atributes_pie UNIR error:error
                  {: ErrorHolder.messageEsperabaUna("asignacion de una lista de tuplas", 1, errorleft, errorright); :}
                  |
                  atributes_pie error:error
                  {: ErrorHolder.messageEsperabaUn("atributo para el grafico de pie", 1, errorleft, errorright); :}
                  |
                  /* lambda */
                  {: if (isRight()) RESULT = new GraficoPie(); :}
                  ;

array ::= IZQ_CORCHETE grupo_exprs DER_CORCHETE
          {: if (isRight()) RESULT = numbers; numbers = null; :}
          |
          IZQ_CORCHETE grupo_tuplas DER_CORCHETE
          {: if (isRight()) RESULT = tuplas; tuplas = null; :}
          |
          IZQ_CORCHETE grupo_strings DER_CORCHETE
          {: if (isRight()) RESULT = strings; strings = null; :}
          |
          COMA error:error
          {: ErrorHolder.messageEsperabaUna("lista de datos de un solo tipo", 1, errorleft, errorright); :}
          ;

tupla ::= IZQ_LLAVE expr:x COMA expr:y DER_LLAVE
          {: if (isRight()) RESULT = new TuplaBivalor(x, y, xleft, xright, yleft, yright); :}
          |
          IZQ_LLAVE error DER_LLAVE:error
          {: ErrorHolder.messageEsperabaUn("segundo valor numerico", 1, errorleft, errorright); :}
          |
          IZQ_LLAVE expr COMA expr COMA error:error DER_LLAVE
          {: ErrorHolder.messageEsperabaUna("'}' (llave de cierre)'", 1, errorleft, errorright); :}
          ;

grupo_exprs ::= grupo_exprs COMA expr:num
                {: if (isRight()) numbers.add(num); :}
                |
                expr:num
                {: numbers = new ArrayList<>(); numbers.add(num); :}
                ;

grupo_strings ::= grupo_strings COMA LITERAL:str
                  {: if (isRight()) strings.add(str); :}
                  |
                  LITERAL:str
                  {: strings = new ArrayList<>(); strings.add(str); :}
                  ;

grupo_tuplas ::= grupo_tuplas COMA tupla:tupla
                 {: if (isRight()) tuplas.add(tupla); :}
                 |
                 tupla:tupla
                 {: tuplas = new ArrayList<>(); tuplas.add(tupla); :}
                 ;

expr ::= expr:num1 MAS:mas expr:num2
         {:
          if (isRight()) {
            RESULT = num1 + num2;
            new OcurrenciaMatematica("", "+", masleft, masright);
          }
         :}
         |
         expr:num1 MENOS:menos expr:num2
         {:
          if (isRight()) {
            RESULT = num1 - num2;
            new OcurrenciaMatematica("", "-", menosleft, menosright);
          }
         :}
         |
         expr:num1 POR:por expr:num2
         {:
          if (isRight()) {
            RESULT = num1 * num2;
            new OcurrenciaMatematica("", "*", porleft, porright);
          }
         :}
         |
         expr:num1 DIV:div expr:num2
         {:
          if (isRight()) {
            RESULT = num1 / num2;
            new OcurrenciaMatematica("", "/", divleft, divright);
          }
         :}
	     |
         MENOS:menos expr:num
         {:
          if (isRight()) {
            RESULT = - num;
            new OcurrenciaMatematica("", "-", menosleft, menosright);
          }
         :}
         %prec NEGADO
         |
         IZQ_PARENTESIS expr:num DER_PARENTESIS
         {: if (isRight()) RESULT = num; :}
         |
         NUMBER:num
         {: if (isRight()) RESULT = num; :}
         |
         expr error:error
         {: ErrorHolder.messageEsperabaUn("numero", 1, errorleft, errorright); :}
	     ;
